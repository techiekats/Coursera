{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 STIXGeneral-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red249\green249\blue249;\red11\green81\blue160;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs28 \cf2 \cb3 Download the text file {\field{\*\fldinst{HYPERLINK "http://spark-public.s3.amazonaws.com/algo1/programming_prob/Median.txt"}}{\fldrslt \cf4 here}}.\
\
The goal of this problem is to implement the "Median Maintenance" algorithm (covered in the Week 5 lecture on heap applications). The text file contains a list of the integers from 1 to 10000 in unsorted order; you should treat this as a stream of numbers, arriving one by one. Letting
\fs34 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 i
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 denote the
\fs34 \
\pard\pardeftab720

\f1\i \cf2 i
\f0\i0 \
\pard\pardeftab720

\fs28 \cf2 th number of the file, the
\fs34 \
\pard\pardeftab720

\f1\i \cf2 k
\f0\i0 \
\pard\pardeftab720

\fs28 \cf2 th median
\fs34 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 is defined as the median of the numbers
\fs34 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 1
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 ,\'85,
\f0 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 . (So, if
\fs34 \
\pard\pardeftab720

\f1\i \cf2 k
\f0\i0 \
\pard\pardeftab720

\fs28 \cf2 is odd, then
\fs34 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 is
\fs34 \
\pard\pardeftab720

\f1 \cf2 ((
\i k
\i0 +1)/2)
\f0 \
\pard\pardeftab720

\fs28 \cf2 th smallest number among
\fs34 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 1
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 ,\'85,
\f0 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 ; if
\fs34 \
\pard\pardeftab720

\f1\i \cf2 k
\f0\i0 \
\pard\pardeftab720

\fs28 \cf2 is even, then
\fs34 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 is the
\fs34 \
\pard\pardeftab720

\f1 \cf2 (
\i k
\i0 /2)
\f0 \
\pard\pardeftab720

\fs28 \cf2 th smallest number among
\fs34 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 1
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 ,\'85,
\f0 \
\pard\pardeftab720

\f1\i \cf2 x
\f0\i0 \
\pard\pardeftab720

\f1\i\fs24 \cf2 k
\f0\i0\fs34 \
\pard\pardeftab720

\fs28 \cf2 .)\
\
In the box below you should type the sum of these 10000 medians, modulo 10000 (i.e., only the last 4 digits). That is, you should compute
\fs34 \
\pard\pardeftab720

\f1 \cf2 (
\f0 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 1
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 +
\f0 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 2
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 +
\f0 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 3
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 +\uc0\u8943 +
\f0 \
\pard\pardeftab720

\f1\i \cf2 m
\f0\i0 \
\pard\pardeftab720

\f1\fs24 \cf2 10000
\f0\fs34 \
\pard\pardeftab720

\f1 \cf2 )mod10000
\f0 \
\pard\pardeftab720

\fs28 \cf2 .\
\
OPTIONAL EXERCISE: Compare the performance achieved by heap-based and search-tree-based implementations of the algorithm.}